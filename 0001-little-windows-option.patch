From 9d41b2eeaaa9b805b2cf0ec7e6642ce01aa8735d Mon Sep 17 00:00:00 2001
From: luquanhong <quanhong.lqh@alibaba-inc.com>
Date: Fri, 12 Aug 2016 11:30:11 +0800
Subject: [PATCH 1/3] little windows option

Change-Id: I47ad00069cc405d3b39d1f2ef521d7f5e8a50634
---
 core/u3player_core                                 |  2 +-
 r2/d2/android/inc/AndroidJavaMediaCodec.h          |  3 +++
 r2/d2/android/src/AndroidJavaMediaCodec.cpp        | 31 +++++++++++++++++-----
 r2/r2/src/FFmpegDataSource.cpp                     |  2 +-
 .../jni/com_UCMobile_Apollo_MediaPlayer.cpp        | 12 ++++-----
 5 files changed, 35 insertions(+), 15 deletions(-)

diff --git a/core/u3player_core b/core/u3player_core
index 87d223e..13cb6a1 160000
--- a/core/u3player_core
+++ b/core/u3player_core
@@ -1 +1 @@
-Subproject commit 87d223e30c623b020c42041120c135f6886da724
+Subproject commit 13cb6a1af245eb0841b079fb0e7304c1351d541d
diff --git a/r2/d2/android/inc/AndroidJavaMediaCodec.h b/r2/d2/android/inc/AndroidJavaMediaCodec.h
index 871f3f9..a42bc8f 100755
--- a/r2/d2/android/inc/AndroidJavaMediaCodec.h
+++ b/r2/d2/android/inc/AndroidJavaMediaCodec.h
@@ -118,6 +118,8 @@ private:
 
     int configureMediaCodec(const string& name, int* result);
 
+    void reconfigureMediaCodec();
+
 private:
     static const char* TAG;
 
@@ -161,6 +163,7 @@ private:
 
     static bool _isTimeoutException;
     bool _isMediaCodecBlocked;
+    bool _isNeedReconfigure;
 }; 
 
 
diff --git a/r2/d2/android/src/AndroidJavaMediaCodec.cpp b/r2/d2/android/src/AndroidJavaMediaCodec.cpp
index 4354211..9a372c7 100755
--- a/r2/d2/android/src/AndroidJavaMediaCodec.cpp
+++ b/r2/d2/android/src/AndroidJavaMediaCodec.cpp
@@ -39,6 +39,7 @@ AndroidJavaMediaCodec::AndroidJavaMediaCodec(AVCodecContext* context, jobject su
                 , _isException(false)
                 , _isFlushed(false)
                 , _isMediaCodecBlocked(false)
+				, _isNeedReconfigure(false)
 {
     Logger::i("AndroidJavaMediaCodec","AndroidJavaMediaCodec %p", this);
 	_mMediaCodec = new AndroidJavaMediaCodecJni(_mContext);
@@ -312,7 +313,7 @@ void AndroidJavaMediaCodec::play()
 
 void AndroidJavaMediaCodec::pause()
 {
-    turbo::Mutex::AutoLock lock(_decodeLock);
+    //turbo::Mutex::AutoLock lock(_decodeLock);
     Logger::d("AndroidJavaMediaCodec", " %s enter \n", __FUNCTION__);
     _isStarted = false;
 }
@@ -370,6 +371,11 @@ int AndroidJavaMediaCodec::decode(uint8_t *pData, int iSize, int64_t time, Media
     if (!_mMediaCodec) 
         return MC_API_ERROR;
     
+	if (_isNeedReconfigure) {
+        reconfigureMediaCodec();
+        _isNeedReconfigure = false;
+    }
+    
     int ret;
     uint32_t queue_flags = 0;
     H264ConvertState convert_state = {0, 0};
@@ -504,16 +510,13 @@ Logger::e(TAG, "raw [%d][] %02x %02x %02x %02x %02x %02x %02x %02x\n", iSize,
     return ret;
 }
 
-void AndroidJavaMediaCodec::setPlatformData(void* platformData)
+void AndroidJavaMediaCodec::reconfigureMediaCodec()
 {
-    Logger::d(TAG, "===== %s:  entry\n", __func__);
-    turbo::Mutex::AutoLock lock(_decodeLock);
-
     int ret = 0;
-    _platformData = (PlatformData*)platformData;
+    //_platformData = (PlatformData*)platformData;
     jobject surface = _platformData->getSurface();
 
-     Logger::d(TAG, "setPlatformData surface =%p _mSurface = %p\n", surface, _mSurface);
+    Logger::d(TAG, " %s setPlatformData surface =%p _mSurface = %p\n",__FUNCTION__, surface, _mSurface);
     if ( _mSurface == surface ) {
         // do nothing
     } else if (surface != NULL ){
@@ -537,6 +540,20 @@ void AndroidJavaMediaCodec::setPlatformData(void* platformData)
         stop();
     }
 
+
+}
+
+void AndroidJavaMediaCodec::setPlatformData(void* platformData)
+{
+    Logger::d(TAG, "===== %s:  entry\n", __FUNCTION__);
+    turbo::Mutex::AutoLock lock(_decodeLock);
+
+    jobject surface = _platformData->getSurface();
+    if (!surface) {
+        stop();
+    } else {
+        _isNeedReconfigure = true;
+    }
 }
 
 void AndroidJavaMediaCodec::convert_h264_to_annexb( uint8_t *p_buf, size_t i_len,
diff --git a/r2/r2/src/FFmpegDataSource.cpp b/r2/r2/src/FFmpegDataSource.cpp
index 8b5e395..e2cdc33 100755
--- a/r2/r2/src/FFmpegDataSource.cpp
+++ b/r2/r2/src/FFmpegDataSource.cpp
@@ -1463,7 +1463,7 @@ bool FFmpegDataSource::seekTrackTo(size_t trackIndex, int64_t seekTimeUs, bool w
     _droppingFinishedTrackCount = 0;
     _clearAllDataBuffersInAllSelectedTracks();
 #if defined(__ANDROID__)
-    checkBufferingState();
+    //checkBufferingState();
 #endif
 
     refcount_ptr<Message> message = new SeekMessage(this, trackIndex, seekTimeUs);
diff --git a/sdk-android/ApolloSDK/jni/com_UCMobile_Apollo_MediaPlayer.cpp b/sdk-android/ApolloSDK/jni/com_UCMobile_Apollo_MediaPlayer.cpp
index 1cb557a..54134ee 100755
--- a/sdk-android/ApolloSDK/jni/com_UCMobile_Apollo_MediaPlayer.cpp
+++ b/sdk-android/ApolloSDK/jni/com_UCMobile_Apollo_MediaPlayer.cpp
@@ -768,7 +768,7 @@ void MediaPlayerInstance::nativeCreateInstance(JNIEnv* env, jobject mp, jobject
 void MediaPlayerInstance::nativeRelease(JNIEnv* env, jobject mp)
 {
 
-#ifdef DEBUG
+#if 1//def DEBUG
     Logger::d(LOG_TAG, "jni nativeRelease: instance = %p, always call nativeReset\n", this);
 #endif
 
@@ -799,7 +799,7 @@ void MediaPlayerInstance::nativeRelease(JNIEnv* env, jobject mp)
 bool MediaPlayerInstance::nativePrepare(JNIEnv* env, jobject mp, jstring dataSource, jobject headers, jobject surface, jboolean isAsync)
 {
 
-#ifdef DEBUG
+#if 1//def DEBUG
     Logger::d(LOG_TAG, "jni nativePrepare: instance = %p\n", this);
 #endif
 
@@ -830,7 +830,7 @@ bool MediaPlayerInstance::nativeStart(JNIEnv* env, jobject mp)
         return false;
     }
 
-#ifdef DEBUG
+#if 1//def DEBUG
     Logger::d(LOG_TAG, "jni nativeStart: instance = %p\n", this);
 #endif
 
@@ -924,7 +924,7 @@ bool MediaPlayerInstance::nativeStopInternal()
 
 bool MediaPlayerInstance::nativePlay(JNIEnv* env, jobject mp)
 {
-#ifdef DEBUG
+#if 1//def DEBUG
     Logger::d(LOG_TAG, "jni nativePlay: instance = %p, _nativeWindowInvalid %d, _pendingPlay %d\n", this, _nativeWindowInvalid, _pendingPlay);
 #endif
 
@@ -953,7 +953,7 @@ bool MediaPlayerInstance::nativePlay(JNIEnv* env, jobject mp)
 bool MediaPlayerInstance::nativePause(JNIEnv* env, jobject mp)
 {
 
-#ifdef DEBUG
+#if 1//def DEBUG
     Logger::d(LOG_TAG, "jni nativePause: instance = %p\n", this);
 #endif
 
@@ -1002,7 +1002,7 @@ bool MediaPlayerInstance::nativeSeekTo(JNIEnv* env, jobject mp, jint msec)
 void MediaPlayerInstance::nativeReset(JNIEnv* env, jobject mp)
 {
 
-#ifdef DEBUG
+#if 1//def DEBUG
     Logger::d(LOG_TAG, "jni nativeReset: instance = %p\n", this);
 #endif
 
-- 
1.9.1

